import tkinter as tk
from tkinter import ttk, filedialog, messagebox, scrolledtext
import json
from threading import Thread
from datetime import datetime
from AdminClient import BlockchainClient, KeyManager, DiplomaGenerator


class AdminClientGui:
    def __init__(self, root):
        self.root = root
        self.client = None
        self.key_manager = None
        self.diploma_data = {}

        root.title("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–∏–ø–ª–æ–º–æ–≤")
        root.geometry("800x600")
        self.create_widgets()

    def create_widgets(self):
        # –í–∫–ª–∞–¥–∫–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.notebook = ttk.Notebook(self.root)
        self.notebook.pack(fill=tk.BOTH, expand=True)

        # –í–∫–ª–∞–¥–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        self.auth_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.auth_frame, text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        self.setup_auth_tab()

        # –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–∞–º–∏
        self.keys_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.keys_frame, text="üîë –ö–ª—é—á–∏")
        self.setup_keys_tab()

        # –í–∫–ª–∞–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–ø–ª–æ–º–∞
        self.diploma_frame = ttk.Frame(self.notebook)
        self.notebook.add(self.diploma_frame, text="üéì –î–∏–ø–ª–æ–º")
        self.setup_diploma_tab()

        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        self.log_area = scrolledtext.ScrolledText(self.root, state='disabled')
        self.log_area.pack(fill=tk.BOTH, expand=True)

    def setup_auth_tab(self):
        frame = self.auth_frame
        ttk.Label(frame, text="–ê–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞:").grid(row=0, column=0, padx=5, pady=5)
        self.server_host = ttk.Entry(frame)
        self.server_host.insert(0, "localhost")
        self.server_host.grid(row=0, column=1, padx=5, pady=5)

        ttk.Label(frame, text="–ü–æ—Ä—Ç:").grid(row=1, column=0, padx=5, pady=5)
        self.server_port = ttk.Entry(frame)
        self.server_port.insert(0, "65432")
        self.server_port.grid(row=1, column=1, padx=5, pady=5)

        ttk.Label(frame, text="–õ–æ–≥–∏–Ω:").grid(row=2, column=0, padx=5, pady=5)
        self.username = ttk.Entry(frame)
        self.username.grid(row=2, column=1, padx=5, pady=5)

        ttk.Label(frame, text="–ü–∞—Ä–æ–ª—å:").grid(row=3, column=0, padx=5, pady=5)
        self.password = ttk.Entry(frame, show="*")
        self.password.grid(row=3, column=1, padx=5, pady=5)

        self.login_btn = ttk.Button(frame, text="–í–æ–π—Ç–∏", command=self.login)
        self.login_btn.grid(row=4, columnspan=2, pady=10)

    def setup_keys_tab(self):
        frame = self.keys_frame
        self.key_choice = tk.StringVar(value="new")

        ttk.Radiobutton(frame, text="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–ª—é—á–∏", variable=self.key_choice, value="new"
                        ).grid(row=0, column=0, sticky=tk.W)
        ttk.Radiobutton(frame, text="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ", variable=self.key_choice, value="existing"
                        ).grid(row=1, column=0, sticky=tk.W)

        self.key_path = ttk.Entry(frame)
        self.key_path.grid(row=2, column=0, padx=5, pady=5, sticky=tk.EW)
        ttk.Button(frame, text="–û–±–∑–æ—Ä...", command=self.browse_key_file
                   ).grid(row=2, column=1, padx=5, pady=5)

        ttk.Button(frame, text="–ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=self.handle_keys
                   ).grid(row=3, columnspan=2, pady=10)

    def setup_diploma_tab(self):
        frame = self.diploma_frame
        fields = [
            ('full_name', '–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞:'),
            ('institution', '–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ:'),
            ('qualification', '–°—Ç–µ–ø–µ–Ω—å:'),
            ('specialty', '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:'),
            ('issue_date', '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):'),
            ('reg_number', '–†–µ–≥. –Ω–æ–º–µ—Ä:'),
            ('program', '–ü—Ä–æ–≥—Ä–∞–º–º–∞:'),
            ('rector_name', '–†–µ–∫—Ç–æ—Ä:'),
            ('secretary_name', '–°–µ–∫—Ä–µ—Ç–∞—Ä—å:')
        ]

        for i, (field, label) in enumerate(fields):
            ttk.Label(frame, text=label).grid(row=i, column=0, sticky=tk.W, padx=5, pady=2)
            entry = ttk.Entry(frame)
            entry.grid(row=i, column=1, sticky=tk.EW, padx=5, pady=2)
            setattr(self, f"diploma_{field}", entry)

        ttk.Button(frame, text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞", command=self.load_diploma_file
                   ).grid(row=len(fields), column=0, pady=10)
        ttk.Button(frame, text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", command=self.send_diploma
                   ).grid(row=len(fields), column=1, pady=10)

    def log(self, message):
        self.log_area.configure(state='normal')
        self.log_area.insert(tk.END, f"[{datetime.now().strftime('%H:%M:%S')}] {message}\n")
        self.log_area.configure(state='disabled')
        self.log_area.see(tk.END)

    def login(self):
        def _login():
            try:
                self.client = BlockchainClient(
                    self.server_host.get(),
                    int(self.server_port.get())
                )
                response = self.client.login(
                    self.username.get(),
                    self.password.get()
                )

                if response.get("status") == "OK":
                    self.log("–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
                else:
                    self.log(f"–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {response.get('message')}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", response.get('message', 'Unknown error'))

            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞: {str(e)}")
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

        Thread(target=_login, daemon=True).start()

    def browse_key_file(self):
        path = filedialog.askopenfilename()
        if path:
            self.key_path.delete(0, tk.END)
            self.key_path.insert(0, path)

    def handle_keys(self):
        try:
            if self.key_choice.get() == "new":
                path = self.key_path.get()
                KeyManager().save_to_file(path)
                self.key_manager = KeyManager.from_file(path)
                self.log(f"–ö–ª—é—á–∏ —Å–æ–∑–¥–∞–Ω—ã: {path}")
            else:
                self.key_manager = KeyManager.from_file(self.key_path.get())
                self.log("–ö–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

            messagebox.showinfo("–£—Å–ø–µ—Ö", "–û–ø–µ—Ä–∞—Ü–∏—è —Å –∫–ª—é—á–∞–º–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∫–ª—é—á–µ–π: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

    def load_diploma_file(self):
        path = filedialog.askopenfilename(
            filetypes=[("Text files", "*.txt"), ("All files", "*.*")]
        )
        if not path:
            return

        try:
            with open(path, 'r', encoding='utf-8') as f:
                content = f.read()

            # –ú–∞–ø–ø–∏–Ω–≥ —Ä—É—Å—Å–∫–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –Ω–∞ –∏–º–µ–Ω–∞ –ø–æ–ª–µ–π
            field_mapping = {
                '—Ñ–∏–æ –≤—ã–ø—É—Å–∫–Ω–∏–∫–∞': 'full_name',
                '—É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ': 'institution',
                '–ø—Ä–æ–≥—Ä–∞–º–º–∞ –æ–±—É—á–µ–Ω–∏—è': 'program',
                '–ø—Ä–∏—Å–≤–æ–µ–Ω–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è': 'qualification',
                '—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å': 'specialty',
                '–¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏': 'issue_date',
                '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä': 'reg_number',
                '—Ä–µ–∫—Ç–æ—Ä/–¥–µ–∫–∞–Ω': 'rector_name',
                '—Å–µ–∫—Ä–µ—Ç–∞—Ä—å': 'secretary_name'
            }

            data = {}
            for line in content.split('\n'):
                line = line.strip()
                if not line or ':' not in line:
                    continue

                key_part, _, value_part = line.partition(':')
                key = key_part.strip().lower()
                value = value_part.strip()

                # –ü–æ–∏—Å–∫ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤ –º–∞–ø–ø–∏–Ω–≥–µ
                for ru_key, field in field_mapping.items():
                    if ru_key in key:
                        data[field] = value
                        break

            # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–µ–π –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            for field, value in data.items():
                entry = getattr(self, f"diploma_{field}", None)
                if entry:
                    entry.delete(0, tk.END)
                    entry.insert(0, value)

            self.log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –ø–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞: {path}")
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑\n{path}")

        except UnicodeDecodeError:
            self.log("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–¥–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π–ª–∞")
            messagebox.showerror("–û—à–∏–±–∫–∞", "–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ –∫–æ–¥–∏—Ä–æ–≤–∫–µ UTF-8")
        except Exception as e:
            self.log(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª:\n{str(e)}")

    def send_diploma(self):
        def _send():
            try:
                # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–æ–ª–µ–π
                data = {
                    field: getattr(self, f"diploma_{field}").get()
                    for field in [
                        'full_name', 'institution', 'qualification',
                        'specialty', 'issue_date', 'reg_number',
                        'program', 'rector_name', 'secretary_name'
                    ]
                }

                # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å –¥–∏–ø–ª–æ–º–∞
                diploma = DiplomaGenerator(data)
                diploma.create_signature(self.key_manager)

                # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
                command_data = {
                    "diploma_data": diploma.to_dict(),
                    "public_key": self.key_manager.get_public_pem(),
                    "signature": diploma.data['signature']
                }

                command = f"LOGIN {self.username.get()} {self.password.get()}\r\nADD_BLOCK {json.dumps(command_data)}\r\n\r\n"
                response = self.client.send_command(command)

                if response.get("status") == "OK":
                    self.log(f"–î–∏–ø–ª–æ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –•—ç—à: {response['data'].get('initial_hash')}")
                    messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!")
                else:
                    self.log(f"–û—à–∏–±–∫–∞: {response.get('message')}")
                    messagebox.showerror("–û—à–∏–±–∫–∞", response.get('message', 'Unknown error'))

            except Exception as e:
                self.log(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
                messagebox.showerror("–û—à–∏–±–∫–∞", str(e))

        if not self.key_manager:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∫–ª—é—á–∏!")
            return

        Thread(target=_send, daemon=True).start()


if __name__ == "__main__":
    root = tk.Tk()
    app = AdminClientGui(root)
    root.mainloop()