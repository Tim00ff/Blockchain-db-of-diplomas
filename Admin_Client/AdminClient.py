import socket
import json
from KeyManager import KeyManager
from DiplomaGenerator import DiplomaGenerator


class BlockchainClient:
    def __init__(self, host: str, port: int):
        self.host = host
        self.port = port
        self.key_manager = None
        self.logged_in = False
        self.username = None
        self.password = None

    def connect(self):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º"""
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((self.host, self.port))
        return sock

    def send_command(self, command: str) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"""
        try:
            with self.connect() as sock:
                sock.sendall(command.encode('utf-8'))
                response = sock.recv(4096).decode('utf-8')
                return self.parse_response(response)
        except Exception as e:
            return {"status": "error", "message": str(e)}

    def login(self, username: str, password: str) -> dict:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ª–æ–≥–∏–Ω–∞"""
        command = f"LOGIN {username} {password}\r\n\r\n"
        self.username = username
        self.password = password
        return self.send_command(command)

    @staticmethod
    def parse_response(response: str) -> dict:
        """–ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞"""
        lines = (response.strip().split('\r\n'))
        if not lines:
            return {"status": "error", "message": "Empty response"}

        status_line = lines[0].split(' ', 2)
        result = {
            "status": status_line[0],
            "code": str(status_line[1]) if len(status_line) > 1 else None,
            "message": status_line[2] if len(status_line) > 2 else None,
            "data": {}
        }

        if len(lines) > 1 and lines[1]:
            try:
                result["data"] = json.loads(lines[1])
            except json.JSONDecodeError:
                result["data"] = lines[1]

        return result


def print_header():
    print("\n‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó")
    print("‚ïë   Admin Client wth Diplomas  ‚ïë")
    print("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù")


def input_with_retry(prompt, required=True, is_password=False):
    """–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ–º –ø—Ä–∏ –æ—à–∏–±–∫–µ"""
    while True:
        try:
            if is_password:
                value = input(prompt).strip()
            else:
                value = input(prompt).strip()

            if required and not value:
                print("–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è!")
                continue

            return value
        except KeyboardInterrupt:
            print("\n–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞")
            raise
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞: {str(e)}")


def main():
    print_header()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    host = input_with_retry("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Å–µ—Ä–≤–µ—Ä–∞ [localhost]: ", required=False) or "localhost"
    port = int(input_with_retry("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ [65432]: ", required=False) or 65432)

    client = BlockchainClient(host, port)

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
    print("\nüîê –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è")
    while True:
        username = input_with_retry("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
        password = input_with_retry("–ü–∞—Ä–æ–ª—å: ", is_password=True)

        response = client.login(username, password)
        print(response)
        if response.get("status") == "OK":
            client.logged_in = True
            client.username = username
            print("\n‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É!")
            break
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏!")
            print(f"–ü—Ä–∏—á–∏–Ω–∞: {response.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
            if input("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É? (y/n): ").lower() != 'y':
                return

    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏
    print("\nüîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–∞–º–∏:")
    print("1. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø–∞—Ä—É –∫–ª—é—á–µ–π")
    print("2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏")
    choice = input_with_retry("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ [1/2]: ")

    if choice == "1":
        key_path = input_with_retry("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–ª—é—á–µ–π: ")
        KeyManager().save_to_file(key_path)
        client.key_manager = KeyManager.from_file(key_path)
        print(f"‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {key_path}")
    else:
        key_path = input_with_retry("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–ª—é—á–µ–π: ")
        client.key_manager = KeyManager.from_file(key_path)
        print("‚úÖ –ö–ª—é—á–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞
    print("\nüéì –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏–ø–ª–æ–º–∞:")
    diploma_data = {
        'full_name': input_with_retry("–§–ò–û —Å—Ç—É–¥–µ–Ω—Ç–∞: "),
        'institution': input_with_retry("–£—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: "),
        'qualification': input_with_retry("–°—Ç–µ–ø–µ–Ω—å (–ë–∞–∫–∞–ª–∞–≤—Ä/–ú–∞–≥–∏—Å—Ç—Ä –∏ —Ç.–¥.): "),
        'specialty': input_with_retry("–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: "),
        'issue_date': input_with_retry("–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì): "),
        'reg_number': input_with_retry("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: "),
        'program': input_with_retry("–û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: "),
        'rector_name': input_with_retry("–§–ò–û —Ä–µ–∫—Ç–æ—Ä–∞ (–ò–≤–∞–Ω–æ–≤ –ò.–ò.): "),
        'secretary_name': input_with_retry("–§–ò–û —Å–µ–∫—Ä–µ—Ç–∞—Ä—è (–ü–µ—Ç—Ä–æ–≤ –ü.–ü.): ")
    }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å –¥–∏–ø–ª–æ–º–∞
    try:
        diploma = DiplomaGenerator(diploma_data)
        diploma.create_signature(client.key_manager)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏–ø–ª–æ–º–∞: {str(e)}")
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã
    command_data = {
        "diploma_data": diploma.to_dict(),
        "public_key": client.key_manager.get_public_pem(),
        "signature": diploma.data['signature']
    }

    command = f"LOGIN {username} {password}\r\nADD_BLOCK {json.dumps(command_data)}\r\n\r\n"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã
    print("\nüöÄ –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä...")
    response = client.send_command(command)
    print(response)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if response[0:1] == "OK":
        print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        print(f"–•—ç—à: {response['data'].get('initial_hash', 'N/A')}")
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {response['data'].get('difficulty', 'N/A')}")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞!")
        print(f"–ö–æ–¥: {response.get('code', 'Unknown')}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {response.get('message', 'Unknown error')}")
        if 'data' in response:
            print(f"–î–µ—Ç–∞–ª–∏: {response['data']}")


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n–†–∞–±–æ—Ç–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    finally:
        print("\n–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤—ã—Ö–æ–¥–∞...")
        input()